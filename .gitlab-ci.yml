stages:
  - build
  - test
  - security
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

cache:
  paths:
    - .cache/pip/
    - .venv/

before_script:
  - python --version
  - pip install --upgrade pip
  - python -m venv .venv
  - source .venv/bin/activate

# Build stage
build:
  stage: build
  image: python:3.11-slim
  script:
    - make install-dev
    - echo "Build completed successfully"
  artifacts:
    expire_in: 1 hour
    paths:
      - .venv/
  only:
    - merge_requests
    - main
    - develop

# Test stage
unit_tests:
  stage: test
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - make test-unit
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

integration_tests:
  stage: test
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - make test-integration
  artifacts:
    reports:
      junit: junit.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Code quality checks
lint:
  stage: test
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - make lint
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

type_check:
  stage: test
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - make type-check
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

format_check:
  stage: test
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - make format-check
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

# Security scanning
security_scan:
  stage: security
  image: python:3.11-slim
  dependencies:
    - build
  script:
    - source .venv/bin/activate
    - pip install safety bandit
    - safety check --json --output safety-report.json || true
    - bandit -r src/ -f json -o bandit-report.json || true
  artifacts:
    reports:
      dependency_scanning: safety-report.json
      sast: bandit-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Docker build and test
docker_build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG
  only:
    - main
    - develop
    - tags

# Integration test with Docker
docker_test:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - docker_build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $DOCKER_IMAGE_TAG
    - docker run --name test-container -d -p 8000:8000 -e ANTHROPIC_API_KEY=test-key $DOCKER_IMAGE_TAG
    - sleep 10
    - docker exec test-container curl -f http://localhost:8000/health
    - docker stop test-container
    - docker rm test-container
  only:
    - main
    - develop
    - tags

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment"
    - curl -X POST "$STAGING_DEPLOY_WEBHOOK" -H "Authorization: Bearer $STAGING_DEPLOY_TOKEN"
  environment:
    name: staging
    url: https://summary-service-staging.example.com
  only:
    - develop
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment"
    - curl -X POST "$PRODUCTION_DEPLOY_WEBHOOK" -H "Authorization: Bearer $PRODUCTION_DEPLOY_TOKEN"
  environment:
    name: production
    url: https://summary-service.example.com
  only:
    - main
  when: manual
  needs:
    - unit_tests
    - integration_tests
    - docker_test
    - security_scan